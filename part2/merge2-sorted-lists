# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def mergeTwoLists(self, list1, list2):
        
        #curr2 = list2
        valList = []
        #print("lsit1: ", (list1.next).val)
        if list1 != None:
            while (list1.next != None):
                valList.append((list1.val))
                list1 = list1.next

            valList.append((list1.val))
        


        if list2 != None:
            while list2.next:
                print("adding: ", list2.val)
                valList.append((list2.val))
                list2 = list2.next

            valList.append((list2.val))

        valList = sorted(valList,  reverse=True)

        # we add to the front so we just need to keep adding the first value in the list
      # this is for the head
        if not valList:
            return
        
        head = ListNode(valList[0])
        valList.pop(0)


        curr = head
       

      # we add to the front
        while valList: 
                curr = ListNode(valList[0])
                curr.next = head
                head = curr
                valList.pop(0)
        
        return curr



        """
        :type list1: Optional[ListNode]
        :type list2: Optional[ListNode]
        :rtype: Optional[ListNode]
        """
        
